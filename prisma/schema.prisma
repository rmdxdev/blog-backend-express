generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  username    String
  email       String
  password    String
  image       String?

  status      Status @default(DEFAULT)

  posts       Post[]
  comments    Comment[]
  likes       Like[]

  @@unique([username, email])
  @@map("user")
}

model Post {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  title       String
  desc        String
  content     String
  image       String

  views       Int? @default(0)

  likes       Like[]
  tags        String[] @default([])

  user_id     String @db.ObjectId
  user        User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  comments Comment[]

  @@map("post")
}

model Like {
  id      String @id @default(auto()) @map("_id") @db.ObjectId

  user_id String @db.ObjectId
  post_id String @db.ObjectId

  user    User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  post    Post @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@map("like")
}

model Comment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  text        String

  user_id     String @db.ObjectId
  user        User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  post_id     String @db.ObjectId
  post        Post   @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@map("comment")
}

model ResetToken {
  id      String @id @default(auto()) @map("_id") @db.ObjectId

  user_id String   @db.ObjectId
  token   String
  expires DateTime

  @@map("reset_token")
}

model AuthToken {
  id            String @id @default(auto()) @map("_id") @db.ObjectId

  user_id       String @db.ObjectId
  access_token  String
  refresh_token String

  @@map("auth_token")
}

enum Status {
  DEFAULT
  VIP
}

enum Role {
  USER
  MODERATOR
  ADMIN
}
